#N canvas 159 22 1614 888 12;
#X text 36 277 ============================================================
;
#X obj 36 506 cnv 15 450 60 empty empty empty 20 12 0 14 -235552 -66577
0;
#X text 47 569 ============================================================
;
#X obj 517 20 cnv 15 450 260 empty empty Hann-Window 20 12 0 14 -179243
-66577 0;
#X text 537 143 A window type is like an envelope that smoothens up
the beggining and ending of each block. One popular window type is
the Hann window \, which is just an inverted cosine wave that goes
from a minimum of "0" to a maximum of "1".;
#X text 537 210 We can create a Hann window with the [osc~] object.
Check the subpatch below:;
#X obj 517 281 cnv 15 450 300 empty empty Overlaps 20 12 0 14 -195769
-66577 0;
#X text 536 487 The [block~] object also sets up the number of overlaps
as its second argument!;
#N canvas 681 35 561 752 Hann-Window 0;
#X text 133 41 1;
#X text 132 156 0;
#X text 149 172 0;
#X text 338 173 512;
#X obj 221 528 osc~;
#X obj 221 450 samplerate~;
#X obj 221 620 +~ 0.5;
#X obj 213 659 tabwrite~ \$0-hann;
#X obj 221 474 / 512;
#X obj 221 597 *~ 0.5;
#X msg 288 497 0.5;
#X obj 221 499 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262130 -1 -1 0 256;
#X obj 213 415 trigger bang bang bang;
#X obj 213 394 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262130 -1
-1;
#X obj 148 49 cnv 15 198 118 empty empty empty 20 12 0 14 -262130 -66577
0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-hann 512 float 1;
#A 0 0 3.76701e-05 0.000150651 0.000338882 0.000602365 0.000941068
0.00135493 0.00184387 0.00240785 0.00304675 0.00376052 0.004549 0.0054121
0.00634965 0.00736159 0.00844771 0.00960782 0.0108418 0.0121495 0.0135306
0.014985 0.0165124 0.0181127 0.0197855 0.0215306 0.0233478 0.0252367
0.0271972 0.0292289 0.0313314 0.0335046 0.035748 0.0380613 0.0404442
0.0428963 0.0454172 0.0480066 0.050664 0.0533891 0.0561815 0.0590407
0.0619664 0.0649579 0.0680151 0.0711372 0.074324 0.0775748 0.0808893
0.0842669 0.0877071 0.0912094 0.0947732 0.0983981 0.102083 0.105829
0.109633 0.113497 0.117418 0.121398 0.125434 0.129527 0.133675 0.137879
0.142137 0.146449 0.150814 0.155232 0.159702 0.164223 0.168795 0.173416
0.178087 0.182806 0.187573 0.192387 0.197247 0.202153 0.207104 0.212099
0.217137 0.222218 0.22734 0.232504 0.237708 0.242952 0.248234 0.253554
0.258911 0.264305 0.269734 0.275198 0.280695 0.286226 0.291789 0.297383
0.303007 0.308662 0.314345 0.320056 0.325794 0.331559 0.337348 0.343163
0.349001 0.354861 0.360744 0.366647 0.372571 0.378514 0.384475 0.390453
0.396448 0.402459 0.408484 0.414523 0.420575 0.426639 0.432714 0.438799
0.444893 0.450996 0.457106 0.463222 0.469344 0.47547 0.481601 0.487734
0.493868 0.500004 0.50614 0.512275 0.518408 0.524538 0.530665 0.536787
0.542903 0.549013 0.555116 0.56121 0.567295 0.57337 0.579434 0.585485
0.591524 0.59755 0.60356 0.609555 0.615534 0.621495 0.627437 0.633361
0.639264 0.645147 0.651007 0.656845 0.66266 0.668449 0.674214 0.679952
0.685663 0.691346 0.697001 0.702625 0.708219 0.713782 0.719313 0.72481
0.730274 0.735703 0.741096 0.746453 0.751774 0.757056 0.762299 0.767503
0.772667 0.777789 0.78287 0.787908 0.792903 0.797854 0.80276 0.80762
0.812434 0.817201 0.82192 0.82659 0.831212 0.835783 0.840304 0.844774
0.849192 0.853557 0.857869 0.862127 0.866331 0.870479 0.874572 0.878608
0.882587 0.886509 0.890372 0.894177 0.897922 0.901607 0.905232 0.908796
0.912298 0.915738 0.919115 0.92243 0.925681 0.928867 0.931989 0.935046
0.938038 0.940963 0.943823 0.946615 0.94934 0.951997 0.954586 0.957107
0.959559 0.961942 0.964255 0.966499 0.968672 0.970774 0.972806 0.974766
0.976655 0.978472 0.980217 0.98189 0.98349 0.985017 0.986471 0.987852
0.98916 0.990394 0.991554 0.99264 0.993652 0.994589 0.995452 0.996241
0.996954 0.997593 0.998157 0.998646 0.999059 0.999398 0.999661 0.99985
0.999962 1 0.999962 0.999849 0.999661 0.999398 0.999059 0.998645 0.998156
0.997592 0.996953 0.99624 0.995451 0.994588 0.993651 0.992639 0.991553
0.990393 0.989159 0.987851 0.98647 0.985016 0.983488 0.981888 0.980215
0.97847 0.976653 0.974764 0.972804 0.970772 0.96867 0.966496 0.964253
0.96194 0.959557 0.957105 0.954584 0.951995 0.949337 0.946612 0.94382
0.940961 0.938035 0.935044 0.931987 0.928864 0.925678 0.922427 0.919113
0.915735 0.912295 0.908793 0.905229 0.901604 0.897919 0.894174 0.890369
0.886506 0.882584 0.878605 0.874569 0.870476 0.866328 0.862124 0.857866
0.853554 0.849189 0.844771 0.840301 0.83578 0.831208 0.826587 0.821916
0.817197 0.81243 0.807616 0.802756 0.79785 0.7929 0.787905 0.782867
0.777786 0.772663 0.7675 0.762296 0.757052 0.75177 0.74645 0.741093
0.735699 0.73027 0.724806 0.719309 0.713778 0.708215 0.702621 0.696997
0.691342 0.685659 0.679948 0.67421 0.668445 0.662656 0.656841 0.651003
0.645143 0.63926 0.633357 0.627433 0.62149 0.615529 0.609551 0.603556
0.597546 0.59152 0.585481 0.579429 0.573365 0.567291 0.561206 0.555111
0.549009 0.542899 0.536782 0.530661 0.524534 0.518404 0.512271 0.506136
0.5 0.493864 0.487729 0.481596 0.475466 0.46934 0.463218 0.457101 0.450991
0.444889 0.438795 0.432709 0.426635 0.420571 0.414519 0.40848 0.402455
0.396444 0.390449 0.384471 0.37851 0.372567 0.366643 0.36074 0.354857
0.348997 0.343159 0.337344 0.331555 0.32579 0.320052 0.314341 0.308658
0.303003 0.297379 0.291785 0.286222 0.280691 0.275194 0.26973 0.264301
0.258907 0.25355 0.24823 0.242948 0.237705 0.232501 0.227337 0.222214
0.217133 0.212095 0.2071 0.20215 0.197244 0.192383 0.18757 0.182803
0.178084 0.173413 0.168791 0.16422 0.159699 0.155229 0.150811 0.146446
0.142134 0.137876 0.133672 0.129524 0.125431 0.121395 0.117416 0.113494
0.109631 0.105826 0.102081 0.0983955 0.0947706 0.0912068 0.0877046
0.0842645 0.0808869 0.0775725 0.0743217 0.071135 0.0680129 0.0649558
0.0619642 0.0590387 0.0561795 0.0533872 0.0506621 0.0480047 0.0454154
0.0428945 0.0404424 0.0380596 0.0357464 0.033503 0.0313299 0.0292274
0.0271958 0.0252354 0.0233465 0.0215293 0.0197842 0.0181115 0.0165113
0.0149839 0.0135296 0.0121485 0.0108409 0.00960699 0.0084469 0.00736085
0.00634897 0.00541145 0.0045484 0.00375998 0.00304627 0.00240743 0.00184351
0.0013546 0.0009408 0.000602156 0.000338733 0.000150532 3.76105e-05
;
#X coords 0 1 511 0 200 120 1;
#X restore 147 49 graph;
#X obj 78 428 send \$0-hann;
#X obj 78 372 bng 15 250 50 0 empty empty empty 17 7 0 10 -260097 -1
-1;
#X text 171 172 ---- window size ----;
#X text 194 192 (or block size);
#X msg 78 397 const 0;
#X text 281 606 make it go from 0 to 1;
#X text 261 529 Waveform: Inverted Cosine;
#X text 322 497 inverted phase;
#X text 50 345 reset hann window table;
#X text 233 391 Calculate and write Hann window on a table;
#X text 229 559 audio from -1 to 1;
#X text 112 472 Window Size ->;
#X text 92 496 fundamental in Hz;
#X text 86 233 To get a Hann Window out of [osc~] we need to find the
frequency that fits into the block size. That is just the same as getting
the fundamental \, and done by dividing the Sample Rate to the Block
Size (as we did in the last example).;
#X connect 4 0 9 0;
#X connect 5 0 8 0;
#X connect 6 0 7 0;
#X connect 8 0 11 0;
#X connect 9 0 6 0;
#X connect 10 0 4 1;
#X connect 11 0 4 0;
#X connect 12 0 7 0;
#X connect 12 1 5 0;
#X connect 12 2 10 0;
#X connect 13 0 12 0;
#X connect 17 0 20 0;
#X connect 20 0 16 0;
#X restore 751 243 pd Hann-Window;
#X text 38 158 So when we do an analysis \, we need to take care of
a few things to have a good information that represents the analyzed
data. After that stage \, the is no mathematical difference or loss
in the conversion made by the transform objects [fft~] & [ifft~]. You
can keep converting back and forth then as many times as you want and
it will always be the same result \, just as 4/2 = 2*2 = 4/2 and so
on!;
#X text 45 297 We know that the FFT decomposes a signal into Pure Tone
Componentes. Each Pure Tone Component is represented by a frequency
point \, and is a multiple of the frequency band. The bigger the block
size \, the more band resolution or frequency points we have - thus
\, a better resolution to resynthesize the signal back to the time
domain.;
#X text 47 399 The FFT theory deals with blocks of audio as if they
were periodic \, that is not what happens in practice. You can't expect
all frequency component to match the exact multiples of the frequency
band. Even if the components are in perfect harmonic relation to each
other \, it doesn't mean they'll fit the block size.;
#X text 57 509 SO WE'RE ALWAYS DEALING WITH AN APPROXIMATION. THE FREQUENCY
POINTS OF AN FFT DON'T IMPLY THAT WE HAVE THOSE EXACT FREQUENCIES IN
THE ANALYZED SIGNAL!!!;
#X text 537 308 We may get rid of some of the dirt with windowing \,
but we're basically performing an Amplitude Modulation \, which was
shown to affect the spectrum before. To work around this problem \,
we need to do more than one analysis for the block size and mix the
signals together \, then apply a normalization factor. This parameter
is called overlapping.;
#X text 537 403 An overlap of 2 means that we're doing 2 analysis for
that block. So at the half of the window size another analysis starts
up. The difference in samples from one analysis to the other is called
HOP SIZE. An Overlap of 4 implies 4 analysis per block and a hop size
of 1/4 that block size.;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-Re 256 float 0;
#X coords 0 128 255 -128 256 200 1;
#X restore 1002 67 graph;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-Im 256 float 0;
#X coords 0 128 255 -128 256 200 1;
#X restore 1318 66 graph;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-Amplitude 256 float 0;
#X coords 0 128 255 -0.5 256 200 1;
#X restore 1003 343 graph;
#X obj 1003 68 cnv 15 254 198 empty empty empty 20 12 0 14 -236717
-66577 0;
#X obj 1004 344 cnv 15 254 198 empty empty empty 20 12 0 14 -204786
-66577 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-Phase 129 float 0;
#X coords 0 3.14 128 -3.13 256 200 1;
#X restore 1320 343 graph;
#X obj 1321 344 cnv 15 254 198 empty empty empty 20 12 0 14 -203904
-66577 0;
#X text 1232 264 Nyquist;
#X text 1000 263 0;
#X text 1545 264 Nyquist;
#X text 1316 264 0;
#X text 1547 543 Nyquist;
#X text 1318 541 0;
#X text 1232 541 Nyquist;
#X text 1001 541 0;
#X obj 1319 67 cnv 15 254 198 empty empty empty 20 12 0 14 -257521
-66577 0;
#X text 982 155 0;
#X text 1305 157 0;
#X text 1307 433 0;
#X text 1205 22 | - Cartesian Form - |;
#X text 1107 41 Cosine;
#X text 1430 44 Sine;
#X text 1217 304 | - Polar Form - |;
#X text 539 528 The parameters for this pacth are a block of 512 \,
4 overlaps \, and a Hann window. Open subpatch below.;
#X text 40 55 We saw how to decompose a signal \, now with the [ifft~]
or [rifft~] objects we'll recreate the analized signals. They're the
inverse transform objects \, and transform from the frequency domain
to the time domain. You can think that we are decomposing a signal
into Frequency Components and then using this information to resynthesyse
it!;
#X text 536 49 Most frequencies are just harshly "cut" to fit into
the block size \, which generates artifacts in the analysis and not
a perfectly stable result for a stable sound. The analysis then generates
"dirt" which will be a problem when we resynthesize the sound back!
One way to clean this up a bit is with "windowing".;
#X obj 729 725 cnv 15 100 50 empty empty empty 20 12 0 14 -203175 -66577
0;
#X obj 786 795 hsl 128 15 0 1 0 0 nothing nothin-as-well gain 50 6
0 12 -128992 -228856 -199988 0 0;
#X obj 737 656 phasor~ 500;
#N canvas 292 240 919 740 FFT-iFFT 0;
#X obj 463 12 cnv 15 350 100 empty empty empty 20 12 0 14 -203822 -66577
0;
#X text 481 35 Block Size is 512 & Number of Overlaps is 4;
#X obj 111 179 cnv 15 500 60 empty empty empty 20 12 0 14 -162285 -66577
0;
#X obj 111 240 cnv 15 500 160 empty empty empty 20 12 0 14 -203175
-66577 0;
#X obj 111 400 cnv 15 500 60 empty empty empty 20 12 0 14 -162285 -66577
0;
#X obj 123 76 cnv 15 210 70 empty empty empty 20 12 0 14 -223969 -66577
0;
#X obj 187 310 cnv 15 120 60 empty empty empty 20 12 0 14 -199719 -66577
0;
#X obj 138 198 rfft~;
#X obj 156 90 tabreceive~ \$0-hann;
#X obj 134 425 rifft~;
#X obj 138 31 inlet~;
#N canvas 0 22 760 555 tables 0;
#X obj 151 84 inlet~;
#X obj 213 83 inlet~;
#X obj 151 264 cartopol~;
#X text 178 32 Sending the signals to Tables for display;
#X obj 369 123 loadbang;
#X obj 369 148 tgl 15 0 empty empty empty 0 -6 0 10 -262144 -1 -1 1
1;
#X obj 369 169 metro 205;
#X text 479 371 Polar Form;
#X obj 350 351 tabwrite~ \$0-Phase;
#X obj 290 380 tabwrite~ \$0-Amplitude;
#X obj 254 226 tabwrite~ \$0-Re;
#X obj 386 227 tabwrite~ \$0-Im;
#X connect 0 0 2 0;
#X connect 0 0 10 0;
#X connect 1 0 2 1;
#X connect 1 0 11 0;
#X connect 2 0 9 0;
#X connect 2 1 8 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 8 0;
#X connect 6 0 9 0;
#X connect 6 0 10 0;
#X connect 6 0 11 0;
#X restore 206 324 pd tables;
#X text 188 113 windowing;
#X text 193 29 <- Input Signal in Time Domain;
#X text 211 187 Transform to;
#X text 199 207 Frequency Domain;
#X text 193 346 display graphs;
#X obj 121 480 cnv 15 210 70 empty empty empty 20 12 0 14 -223969 -66577
0;
#X obj 153 493 tabreceive~ \$0-hann;
#X obj 135 705 outlet~;
#X text 170 520 windowing;
#X text 370 507 (Hann window created on another subpatch);
#X text 215 421 Transform to;
#X text 231 402 Inverse;
#X text 222 437 Time Domain;
#X text 220 245 FREQUENCY DOMAIN COMPLEX SINGAL;
#X text 270 268 Cartesian Form (real & imaginary parts);
#X obj 106 581 cnv 15 350 100 empty empty empty 20 12 0 14 -203822
-66577 0;
#X text 195 638 divide by (block size * 3/2);
#X text 322 320 Block of points in time is now a block;
#X text 321 341 of frequency points \, or "Pure Tones";
#X text 348 197 DECOMPOSES TO PURE TONE COMPONENTS;
#X text 360 407 Recreates Audio in Time Domain;
#X text 388 426 or "Resynthesizes it";
#X text 198 597 Normalize factor for applying;
#X text 201 617 Hann Window in 4 Overlaps.;
#X text 206 704 <- Output Signal in Time Domain;
#X obj 590 63 block~ 512 4;
#X obj 138 119 *~;
#X obj 135 520 *~;
#X obj 135 612 /~ 1536;
#X obj 717 267 loadbang;
#X msg 717 297 \; pd dsp 1;
#X connect 7 0 11 0;
#X connect 7 0 9 0;
#X connect 7 1 11 1;
#X connect 7 1 9 1;
#X connect 8 0 38 1;
#X connect 9 0 39 0;
#X connect 10 0 38 0;
#X connect 18 0 39 1;
#X connect 38 0 7 0;
#X connect 39 0 40 0;
#X connect 40 0 19 0;
#X connect 41 0 42 0;
#X restore 737 736 pd FFT-iFFT;
#N canvas 0 22 237 305 gain 0;
#X obj 79 176 *~;
#X obj 67 208 dac~;
#X obj 108 146 line~;
#X msg 108 120 \$1 10;
#X obj 108 94 pow 4;
#X obj 108 67 inlet;
#X obj 79 36 inlet~;
#X connect 0 0 1 0;
#X connect 0 0 1 1;
#X connect 2 0 0 1;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 5 0 4 0;
#X connect 6 0 0 0;
#X restore 737 821 pd gain;
#X text 445 736 Pure-Tone Decomposition and Resynthesis:;
#X text 832 736 <- open subpatch;
#X text 932 793 We're listening to the audio recreated by the analysis
;
#X obj 737 680 triangle~ 0;
#X floatatom 737 619 5 0 0 0 - - -;
#X connect 42 0 45 1;
#X connect 43 0 49 0;
#X connect 44 0 45 0;
#X connect 49 0 44 0;
#X connect 50 0 43 0;
