#N canvas 293 168 1303 462 12;
#X obj 653 104 bng 15 250 50 0 empty empty empty 17 7 0 10 -204786
-1 -1;
#X obj 571 100 bng 15 250 50 0 empty empty empty 17 7 0 10 -220652
-1 -1;
#X obj 695 85 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-204800 -1 -1 0 256;
#X obj 736 113 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-236782 -1 -1 0 256;
#X obj 612 103 bng 15 250 50 0 empty empty empty 17 7 0 10 -259869
-1 -1;
#X text 601 81 stop;
#X text 645 79 play;
#X text 560 80 open;
#X text 751 80 speed;
#X text 796 109 transposition;
#N canvas 548 66 905 1018 Sampler_Pitch/Time_Controls 0;
#X obj 462 558 cnv 15 120 160 empty empty empty 20 12 0 14 -232608
-66577 0;
#X obj 55 422 cnv 15 475 135 empty empty Counter 11 12 0 14 -188027
-66577 0;
#X obj 531 422 cnv 15 225 135 empty empty empty 20 12 0 14 -236782
-66577 0;
#X obj 274 352 cnv 15 140 70 empty empty empty 20 12 0 14 -240494 -66577
0;
#X floatatom 539 518 8 0 0 0 - - -;
#X obj 592 923 outlet;
#X obj 157 67 inlet;
#X obj 284 66 inlet;
#X obj 539 67 inlet;
#X obj 284 218 nbx 5 35 -1e+37 1e+37 0 0 empty \$0-speed empty 0 -8
0 20 -204800 -1 -1 100 256;
#X obj 539 347 nbx 5 35 -1e+37 1e+37 0 0 empty \$0-transpo empty 0
-8 0 20 -245039 -1 -1 0 256;
#X obj 111 67 inlet;
#X text 111 42 stop;
#X text 160 41 play;
#X text 466 560 To [line~];
#X obj 172 460 +;
#X obj 496 646 pack;
#X obj 113 482 f;
#X obj 69 448 cnv 15 50 30 empty empty empty 20 12 0 14 -240494 -66577
0;
#X obj 74 452 bang~;
#X obj 583 558 cnv 15 140 80 empty empty empty 20 12 0 14 -253343 -66577
0;
#X obj 592 566 / 4;
#X msg 592 601 new-hop \$1;
#X text 626 566 New Hop Size;
#X obj 489 585 t f f;
#X text 288 40 time;
#X text 543 41 pitch;
#X obj 351 390 block~;
#X obj 302 359 / 4;
#X obj 390 131 r \$0-window_size;
#X obj 284 390 *;
#X obj 539 435 expr pow(2 \, ($f1/1200)) * $f2;
#X obj 653 265 /;
#X obj 653 146 * 1000;
#X obj 653 68 inlet;
#X obj 668 228 t f f;
#X text 640 36 sr in khz;
#X obj 668 201 r \$0-sr;
#X obj 539 491 *;
#X text 600 518 New Window Size;
#X msg 351 366 set \$1 4;
#X obj 112 505 spigot;
#X msg 118 374 0;
#X msg 151 374 1;
#X obj 284 428 / 100;
#X obj 205 841 s \$0-transpo;
#X msg 205 811 0;
#X obj 91 710 loadbang;
#X text 158 709 initialize parameters;
#X msg 91 929 symbol ../samples/bubul.wav;
#X obj 91 740 trigger bang bang bang bang bang bang;
#X obj 244 815 s \$0-speed;
#X msg 244 791 100;
#X obj 162 869 s \$0-window_size;
#X msg 162 840 2048;
#X msg 295 771 \; pd dsp 1 \;;
#X obj 382 765 samplerate~;
#X obj 382 794 s \$0-sr;
#X obj 390 164 trigger bang float;
#X obj 142 896 s \$0-reset;
#X obj 189 340 t b b;
#X msg 189 372 0;
#X obj 521 614 +;
#X obj 653 299 trigger bang float;
#X obj 171 484 expr if ($f1 < 0 \, $f1 + end_\$0 \, fmod($f1 \, end_\$0))
;
#X obj 189 311 r \$0-rewind;
#X obj -102 156 cnv 15 180 200 empty empty sampler 110 12 0 14 -233017
-66577 0;
#X obj -88 272 soundfiler;
#X obj -88 159 openpanel;
#X obj -88 215 list append \$0-sample;
#X msg -88 243 read -resize \$1 \$2;
#X obj -88 108 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj -88 64 inlet;
#X obj -72 330 table \$0-sample;
#X text -22 300 sample length;
#X text -95 41 open sample;
#X obj -88 300 v end_\$0;
#X obj -75 186 r \$0-sample-file;
#X obj 91 961 s \$0-sample-file;
#X obj 151 403 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg 496 673 \$1 \, \$2 11;
#X text 317 510 (loop);
#X connect 4 0 21 0;
#X connect 4 0 62 1;
#X connect 6 0 43 0;
#X connect 7 0 9 0;
#X connect 8 0 10 0;
#X connect 9 0 30 0;
#X connect 10 0 31 0;
#X connect 11 0 42 0;
#X connect 15 0 64 0;
#X connect 16 0 80 0;
#X connect 17 0 41 0;
#X connect 19 0 17 0;
#X connect 21 0 22 0;
#X connect 22 0 5 0;
#X connect 24 0 16 0;
#X connect 24 1 62 0;
#X connect 28 0 30 1;
#X connect 29 0 58 0;
#X connect 30 0 44 0;
#X connect 31 0 38 0;
#X connect 32 0 63 0;
#X connect 33 0 32 0;
#X connect 34 0 33 0;
#X connect 35 0 32 0;
#X connect 35 1 32 1;
#X connect 37 0 35 0;
#X connect 38 0 4 0;
#X connect 40 0 27 0;
#X connect 41 0 15 0;
#X connect 41 0 24 0;
#X connect 42 0 79 0;
#X connect 43 0 79 0;
#X connect 44 0 15 1;
#X connect 46 0 45 0;
#X connect 47 0 50 0;
#X connect 49 0 78 0;
#X connect 50 0 49 0;
#X connect 50 1 59 0;
#X connect 50 2 54 0;
#X connect 50 3 46 0;
#X connect 50 3 52 0;
#X connect 50 4 55 0;
#X connect 50 5 56 0;
#X connect 52 0 51 0;
#X connect 54 0 53 0;
#X connect 56 0 57 0;
#X connect 58 0 9 0;
#X connect 58 0 10 0;
#X connect 58 1 28 0;
#X connect 58 1 31 1;
#X connect 58 1 40 0;
#X connect 60 0 61 0;
#X connect 60 1 42 0;
#X connect 61 0 17 1;
#X connect 62 0 16 1;
#X connect 63 0 10 0;
#X connect 63 1 38 1;
#X connect 64 0 17 1;
#X connect 65 0 60 0;
#X connect 67 0 76 0;
#X connect 68 0 69 0;
#X connect 69 0 70 0;
#X connect 70 0 67 0;
#X connect 71 0 68 0;
#X connect 72 0 71 0;
#X connect 77 0 69 0;
#X connect 79 0 41 1;
#X connect 80 0 5 0;
#X restore 571 144 pd Sampler_Pitch/Time_Controls;
#X obj 1005 118 s \$0-window_size;
#X msg 947 81 512;
#X msg 987 81 1024;
#X msg 1030 81 2048;
#X msg 1074 81 4096;
#X obj 1027 150 nbx 5 14 -1e+37 1e+37 0 0 \$0-nowhere \$0-window_size
empty 0 -8 0 10 -262130 -1 -1 2048 256;
#X floatatom 797 138 4 0 0 0 - - -;
#X text 841 138 sample rate in Khz;
#N canvas 24 105 703 510 fft-tables 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-hann 2048 float 1;
#A 0 0 9.41753e-06 1.88351e-05 2.82526e-05 3.76701e-05 6.59227e-05
9.41753e-05 0.000122398 0.000150651 0.000197709 0.000244766 0.000291824
0.000338882 0.000404745 0.000470638 0.000536501 0.000602365 0.000687033
0.000771701 0.0008564 0.000941068 0.00104454 0.00114799 0.00125146
0.00135493 0.00147718 0.0015994 0.00172162 0.00184387 0.00198486 0.00212586
0.00226685 0.00240785 0.00256759 0.0027273 0.00288701 0.00304675 0.00322521
0.00340363 0.00358206 0.00376052 0.00395763 0.00415474 0.00435188 0.004549
0.00476477 0.00498056 0.00519633 0.0054121 0.0056465 0.00588089 0.00611526
0.00634965 0.00660264 0.00685561 0.0071086 0.00736159 0.00763312 0.00790465
0.00817618 0.00844771 0.00873774 0.00902778 0.00931779 0.00960782 0.00991631
0.0102248 0.0105333 0.0108418 0.0111687 0.0114956 0.0118226 0.0121495
0.0124948 0.01284 0.0131853 0.0135306 0.0138942 0.0142578 0.0146214
0.014985 0.0153669 0.0157487 0.0161306 0.0165124 0.0169125 0.0173125
0.0177126 0.0181127 0.0185308 0.0189491 0.0193673 0.0197855 0.0202217
0.020658 0.0210943 0.0215306 0.0219849 0.0224392 0.0228935 0.0233478
0.02382 0.0242922 0.0247645 0.0252367 0.0257269 0.026217 0.0267071
0.0271972 0.0277051 0.028213 0.0287209 0.0292289 0.0297545 0.0302802
0.0308058 0.0313314 0.0318747 0.032418 0.0329613 0.0335046 0.0340654
0.0346263 0.0351871 0.035748 0.0363263 0.0369046 0.037483 0.0380613
0.038657 0.0392527 0.0398484 0.0404442 0.0410572 0.0416702 0.0422832
0.0428963 0.0435265 0.0441567 0.044787 0.0454172 0.0460645 0.0467119
0.0473592 0.0480066 0.0486709 0.0493353 0.0499997 0.050664 0.0513453
0.0520266 0.0527079 0.0533891 0.0540872 0.0547853 0.0554834 0.0561815
0.0568963 0.0576111 0.0583259 0.0590407 0.0597721 0.0605035 0.061235
0.0619664 0.0627142 0.0634621 0.0642101 0.0649579 0.0657222 0.0664865
0.0672508 0.0680151 0.0687956 0.0695761 0.0703567 0.0711372 0.0719339
0.0727306 0.0735273 0.074324 0.0751367 0.0759494 0.0767621 0.0775748
0.0784034 0.079232 0.0800607 0.0808893 0.0817337 0.0825781 0.0834225
0.0842669 0.0851269 0.085987 0.086847 0.0877071 0.0885826 0.0894582
0.0903338 0.0912094 0.0921003 0.0929913 0.0938822 0.0947732 0.0956794
0.0965856 0.0974919 0.0983981 0.0993194 0.100241 0.101162 0.102083
0.10302 0.103956 0.104892 0.105829 0.10678 0.107731 0.108682 0.109633
0.110599 0.111565 0.112531 0.113497 0.114477 0.115458 0.116438 0.117418
0.118413 0.119408 0.120403 0.121398 0.122407 0.123416 0.124425 0.125434
0.126457 0.12748 0.128503 0.129527 0.130564 0.131601 0.132638 0.133675
0.134726 0.135777 0.136828 0.137879 0.138943 0.140008 0.141072 0.142137
0.143215 0.144293 0.145371 0.146449 0.14754 0.148632 0.149723 0.150814
0.151919 0.153023 0.154128 0.155232 0.15635 0.157467 0.158584 0.159702
0.160832 0.161962 0.163093 0.164223 0.165366 0.166509 0.167652 0.168795
0.16995 0.171105 0.172261 0.173416 0.174584 0.175751 0.176919 0.178087
0.179267 0.180446 0.181626 0.182806 0.183998 0.185189 0.186381 0.187573
0.188776 0.18998 0.191183 0.192387 0.193602 0.194817 0.196032 0.197247
0.198474 0.1997 0.200927 0.202153 0.203391 0.204628 0.205866 0.207104
0.208353 0.209601 0.21085 0.212099 0.213358 0.214618 0.215877 0.217137
0.218407 0.219677 0.220948 0.222218 0.223498 0.224779 0.22606 0.22734
0.228631 0.229922 0.231213 0.232504 0.233805 0.235106 0.236407 0.237708
0.239019 0.24033 0.241641 0.242952 0.244272 0.245593 0.246913 0.248234
0.249564 0.250894 0.252224 0.253554 0.254893 0.256233 0.257572 0.258911
0.26026 0.261608 0.262956 0.264305 0.265662 0.267019 0.268377 0.269734
0.2711 0.272466 0.273832 0.275198 0.276572 0.277946 0.279321 0.280695
0.282078 0.28346 0.284843 0.286226 0.287616 0.289007 0.290398 0.291789
0.293187 0.294586 0.295984 0.297383 0.298789 0.300195 0.301601 0.303007
0.304421 0.305835 0.307248 0.308662 0.310083 0.311503 0.312924 0.314345
0.315773 0.3172 0.318628 0.320056 0.321491 0.322925 0.32436 0.325794
0.327235 0.328676 0.330118 0.331559 0.333006 0.334454 0.335901 0.337348
0.338802 0.340256 0.341709 0.343163 0.344622 0.346082 0.347541 0.349001
0.350466 0.351931 0.353396 0.354861 0.356332 0.357803 0.359273 0.360744
0.36222 0.363696 0.365172 0.366647 0.368128 0.369609 0.37109 0.372571
0.374057 0.375542 0.377028 0.378514 0.380004 0.381494 0.382985 0.384475
0.385969 0.387464 0.388959 0.390453 0.391952 0.393451 0.394949 0.396448
0.397951 0.399454 0.400956 0.402459 0.403965 0.405471 0.406978 0.408484
0.409994 0.411504 0.413013 0.414523 0.416036 0.417549 0.419062 0.420575
0.422091 0.423607 0.425123 0.426639 0.428158 0.429676 0.431195 0.432714
0.434235 0.435756 0.437277 0.438799 0.440322 0.441846 0.443369 0.444893
0.446419 0.447944 0.44947 0.450996 0.452523 0.454051 0.455578 0.457106
0.458635 0.460164 0.461693 0.463222 0.464752 0.466283 0.467813 0.469344
0.470875 0.472407 0.473939 0.47547 0.477003 0.478536 0.480068 0.481601
0.483134 0.484667 0.4862 0.487734 0.489267 0.490801 0.492335 0.493868
0.495402 0.496936 0.49847 0.500004 0.501538 0.503072 0.504606 0.50614
0.507674 0.509207 0.510741 0.512275 0.513808 0.515341 0.516875 0.518408
0.51994 0.521473 0.523006 0.524538 0.52607 0.527601 0.529133 0.530665
0.532195 0.533726 0.535256 0.536787 0.538316 0.539845 0.541374 0.542903
0.544431 0.545958 0.547486 0.549013 0.550539 0.552064 0.55359 0.555116
0.556639 0.558163 0.559686 0.56121 0.562731 0.564252 0.565774 0.567295
0.568814 0.570332 0.571851 0.57337 0.574886 0.576402 0.577918 0.579434
0.580947 0.582459 0.583972 0.585485 0.586995 0.588505 0.590015 0.591524
0.593031 0.594537 0.596043 0.59755 0.599052 0.600555 0.602058 0.60356
0.605059 0.606558 0.608056 0.609555 0.61105 0.612544 0.614039 0.615534
0.617024 0.618514 0.620004 0.621495 0.62298 0.624466 0.625952 0.627437
0.628918 0.630399 0.63188 0.633361 0.634837 0.636313 0.637788 0.639264
0.640735 0.642206 0.643676 0.645147 0.646612 0.648077 0.649542 0.651007
0.652467 0.653926 0.655386 0.656845 0.658299 0.659752 0.661206 0.66266
0.664107 0.665555 0.667002 0.668449 0.669891 0.671332 0.672773 0.674214
0.675648 0.677083 0.678517 0.679952 0.68138 0.682808 0.684235 0.685663
0.687084 0.688505 0.689925 0.691346 0.69276 0.694173 0.695587 0.697001
0.698407 0.699813 0.701219 0.702625 0.704024 0.705422 0.706821 0.708219
0.70961 0.711001 0.712391 0.713782 0.715165 0.716547 0.71793 0.719313
0.720687 0.722061 0.723436 0.72481 0.726176 0.727542 0.728908 0.730274
0.731631 0.732988 0.734346 0.735703 0.737051 0.7384 0.739748 0.741096
0.742436 0.743775 0.745114 0.746453 0.747783 0.749114 0.750444 0.751774
0.753094 0.754415 0.755735 0.757056 0.758367 0.759677 0.760988 0.762299
0.7636 0.764901 0.766202 0.767503 0.768794 0.770085 0.771376 0.772667
0.773947 0.775228 0.776509 0.777789 0.77906 0.78033 0.7816 0.78287
0.78413 0.785389 0.786649 0.787908 0.789157 0.790406 0.791654 0.792903
0.794141 0.795378 0.796616 0.797854 0.79908 0.800307 0.801533 0.80276
0.803975 0.80519 0.806405 0.80762 0.808823 0.810027 0.81123 0.812434
0.813626 0.814817 0.816009 0.817201 0.81838 0.81956 0.82074 0.82192
0.823087 0.824255 0.825423 0.82659 0.827746 0.828901 0.830057 0.831212
0.832355 0.833498 0.834641 0.835783 0.836914 0.838044 0.839174 0.840304
0.841422 0.842539 0.843657 0.844774 0.845879 0.846983 0.848088 0.849192
0.850283 0.851375 0.852466 0.853557 0.854635 0.855713 0.856791 0.857869
0.858934 0.859998 0.861063 0.862127 0.863178 0.864229 0.86528 0.866331
0.867368 0.868405 0.869442 0.870479 0.871502 0.872526 0.873549 0.874572
0.875581 0.87659 0.877599 0.878608 0.879603 0.880598 0.881592 0.882587
0.883568 0.884548 0.885528 0.886509 0.887475 0.88844 0.889406 0.890372
0.891323 0.892274 0.893225 0.894177 0.895113 0.896049 0.896986 0.897922
0.898843 0.899764 0.900686 0.901607 0.902513 0.903419 0.904326 0.905232
0.906123 0.907014 0.907905 0.908796 0.909671 0.910547 0.911422 0.912298
0.913158 0.914018 0.914878 0.915738 0.916582 0.917427 0.918271 0.919115
0.919944 0.920773 0.921601 0.92243 0.923243 0.924055 0.924868 0.925681
0.926477 0.927274 0.928071 0.928867 0.929648 0.930428 0.931209 0.931989
0.932754 0.933518 0.934282 0.935046 0.935794 0.936542 0.93729 0.938038
0.938769 0.939501 0.940232 0.940963 0.941678 0.942393 0.943108 0.943823
0.944521 0.945219 0.945917 0.946615 0.947296 0.947977 0.948659 0.94934
0.950004 0.950668 0.951333 0.951997 0.952644 0.953292 0.953939 0.954586
0.955217 0.955847 0.956477 0.957107 0.95772 0.958333 0.958946 0.959559
0.960155 0.960751 0.961346 0.961942 0.96252 0.963099 0.963677 0.964255
0.964816 0.965377 0.965938 0.966499 0.967042 0.967585 0.968128 0.968672
0.969197 0.969723 0.970248 0.970774 0.971282 0.97179 0.972298 0.972806
0.973296 0.973786 0.974276 0.974766 0.975238 0.97571 0.976183 0.976655
0.977109 0.977563 0.978018 0.978472 0.978908 0.979344 0.979781 0.980217
0.980635 0.981053 0.981471 0.98189 0.98229 0.98269 0.98309 0.98349
0.983872 0.984253 0.984635 0.985017 0.985381 0.985744 0.986108 0.986471
0.986817 0.987162 0.987507 0.987852 0.988179 0.988506 0.988833 0.98916
0.989468 0.989777 0.990085 0.990394 0.990684 0.990974 0.991264 0.991554
0.991825 0.992097 0.992368 0.99264 0.992893 0.993146 0.993399 0.993652
0.993886 0.99412 0.994355 0.994589 0.994805 0.995021 0.995236 0.995452
0.995649 0.995846 0.996043 0.996241 0.996419 0.996597 0.996776 0.996954
0.997114 0.997274 0.997433 0.997593 0.997734 0.997875 0.998016 0.998157
0.998279 0.998401 0.998523;
#A 1000 0.998646 0.998749 0.998853 0.998956 0.999059 0.999144 0.999229
0.999313 0.999398 0.999464 0.99953 0.999596 0.999661 0.999708 0.999756
0.999803 0.99985 0.999878 0.999906 0.999934 0.999962 0.999972 0.999981
0.999991 1 0.999991 0.999981 0.999972 0.999962 0.999934 0.999906 0.999878
0.999849 0.999802 0.999755 0.999708 0.999661 0.999595 0.999529 0.999464
0.999398 0.999313 0.999228 0.999144 0.999059 0.998956 0.998852 0.998749
0.998645 0.998523 0.998401 0.998279 0.998156 0.998015 0.997874 0.997733
0.997592 0.997433 0.997273 0.997113 0.996953 0.996775 0.996597 0.996418
0.99624 0.996043 0.995846 0.995648 0.995451 0.995236 0.99502 0.994804
0.994588 0.994354 0.99412 0.993885 0.993651 0.993398 0.993145 0.992892
0.992639 0.992367 0.992096 0.991824 0.991553 0.991263 0.990973 0.990683
0.990393 0.990084 0.989776 0.989467 0.989159 0.988832 0.988505 0.988178
0.987851 0.987506 0.987161 0.986815 0.98647 0.986106 0.985743 0.985379
0.985016 0.984634 0.984252 0.98387 0.983488 0.983088 0.982688 0.982288
0.981888 0.98147 0.981052 0.980633 0.980215 0.979779 0.979343 0.978907
0.97847 0.978016 0.977562 0.977107 0.976653 0.976181 0.975709 0.975236
0.974764 0.974274 0.973784 0.973294 0.972804 0.972296 0.971788 0.97128
0.970772 0.970246 0.969721 0.969195 0.96867 0.968126 0.967583 0.96704
0.966496 0.965936 0.965375 0.964814 0.964253 0.963675 0.963096 0.962518
0.96194 0.961344 0.960748 0.960153 0.959557 0.958944 0.958331 0.957718
0.957105 0.956475 0.955845 0.955214 0.954584 0.953937 0.953289 0.952642
0.951995 0.95133 0.950666 0.950002 0.949337 0.948656 0.947975 0.947294
0.946612 0.945914 0.945216 0.944518 0.94382 0.943105 0.94239 0.941676
0.940961 0.940229 0.939498 0.938767 0.938035 0.937287 0.936539 0.935792
0.935044 0.934279 0.933515 0.932751 0.931987 0.931206 0.930426 0.929645
0.928864 0.928068 0.927271 0.926474 0.925678 0.924865 0.924052 0.92324
0.922427 0.921598 0.92077 0.919941 0.919113 0.918268 0.917424 0.916579
0.915735 0.914875 0.914015 0.913155 0.912295 0.911419 0.910544 0.909668
0.908793 0.907902 0.907011 0.90612 0.905229 0.904323 0.903416 0.90251
0.901604 0.900683 0.899761 0.89884 0.897919 0.896982 0.896046 0.89511
0.894174 0.893222 0.892271 0.89132 0.890369 0.889403 0.888437 0.887471
0.886506 0.885525 0.884545 0.883564 0.882584 0.881589 0.880594 0.8796
0.878605 0.877596 0.876587 0.875578 0.874569 0.873545 0.872522 0.871499
0.870476 0.869439 0.868402 0.867365 0.866328 0.865277 0.864226 0.863175
0.862124 0.861059 0.859995 0.85893 0.857866 0.856788 0.85571 0.854632
0.853554 0.852463 0.851371 0.85028 0.849189 0.848084 0.84698 0.845875
0.844771 0.843653 0.842536 0.841418 0.840301 0.839171 0.83804 0.83691
0.83578 0.834637 0.833494 0.832351 0.831208 0.830053 0.828898 0.827742
0.826587 0.825419 0.824252 0.823084 0.821916 0.820737 0.819557 0.818377
0.817197 0.816006 0.814814 0.813622 0.81243 0.811227 0.810023 0.80882
0.807616 0.806401 0.805186 0.803971 0.802756 0.80153 0.800303 0.799077
0.79785 0.796613 0.795375 0.794137 0.7929 0.791651 0.790402 0.789153
0.787905 0.786645 0.785386 0.784126 0.782867 0.781596 0.780326 0.779056
0.777786 0.776505 0.775225 0.773944 0.772663 0.771372 0.770081 0.76879
0.7675 0.766199 0.764898 0.763597 0.762296 0.760985 0.759674 0.758363
0.757052 0.755732 0.754411 0.75309 0.75177 0.75044 0.74911 0.74778
0.74645 0.74511 0.743771 0.742432 0.741093 0.739744 0.738396 0.737047
0.735699 0.734342 0.732985 0.731627 0.73027 0.728904 0.727538 0.726172
0.724806 0.723432 0.722058 0.720683 0.719309 0.717926 0.716543 0.715161
0.713778 0.712387 0.710997 0.709606 0.708215 0.706817 0.705418 0.70402
0.702621 0.701215 0.699809 0.698403 0.696997 0.695583 0.694169 0.692756
0.691342 0.689921 0.688501 0.68708 0.685659 0.684231 0.682804 0.681376
0.679948 0.678514 0.677079 0.675644 0.67421 0.672769 0.671328 0.669887
0.668445 0.666998 0.665551 0.664103 0.662656 0.661202 0.659748 0.658295
0.656841 0.655382 0.653922 0.652463 0.651003 0.649538 0.648073 0.646608
0.645143 0.643672 0.642202 0.640731 0.63926 0.637784 0.636309 0.634833
0.633357 0.631876 0.630395 0.628914 0.627433 0.625948 0.624462 0.622976
0.62149 0.62 0.61851 0.61702 0.615529 0.614035 0.61254 0.611046 0.609551
0.608052 0.606553 0.605055 0.603556 0.602053 0.600551 0.599048 0.597546
0.596039 0.594533 0.593027 0.59152 0.59001 0.588501 0.586991 0.585481
0.583968 0.582455 0.580942 0.579429 0.577913 0.576397 0.574881 0.573365
0.571847 0.570328 0.568809 0.567291 0.565769 0.564248 0.562727 0.561206
0.559682 0.558158 0.556635 0.555111 0.553586 0.55206 0.550534 0.549009
0.547481 0.545954 0.544426 0.542899 0.54137 0.539841 0.538312 0.536782
0.535252 0.533721 0.532191 0.530661 0.529129 0.527597 0.526066 0.524534
0.523001 0.521469 0.519936 0.518404 0.51687 0.515337 0.513804 0.512271
0.510737 0.509203 0.50767 0.506136 0.504602 0.503068 0.501534 0.5 0.498466
0.496932 0.495398 0.493864 0.492331 0.490797 0.489263 0.487729 0.486196
0.484663 0.48313 0.481596 0.480064 0.478531 0.476999 0.475466 0.473935
0.472403 0.470871 0.46934 0.467809 0.466279 0.464748 0.463218 0.461689
0.460159 0.45863 0.457101 0.455574 0.454046 0.452519 0.450991 0.449466
0.44794 0.446414 0.444889 0.443365 0.441842 0.440318 0.438795 0.437273
0.435752 0.434231 0.432709 0.431191 0.429672 0.428153 0.426635 0.425119
0.423603 0.422087 0.420571 0.419058 0.417545 0.416032 0.414519 0.413009
0.411499 0.40999 0.40848 0.406974 0.405467 0.403961 0.402455 0.400952
0.399449 0.397947 0.396444 0.394945 0.393447 0.391948 0.390449 0.388954
0.38746 0.385965 0.384471 0.38298 0.38149 0.38 0.37851 0.377024 0.375538
0.374053 0.372567 0.371086 0.369605 0.368124 0.366643 0.365167 0.363692
0.362216 0.36074 0.359269 0.357799 0.356328 0.354857 0.353392 0.351927
0.350462 0.348997 0.347537 0.346078 0.344618 0.343159 0.341705 0.340252
0.338798 0.337344 0.335897 0.33445 0.333002 0.331555 0.330114 0.328672
0.327231 0.32579 0.324356 0.322921 0.321487 0.320052 0.318624 0.317196
0.315769 0.314341 0.31292 0.311499 0.310079 0.308658 0.307244 0.305831
0.304417 0.303003 0.301597 0.300191 0.298785 0.297379 0.29598 0.294582
0.293183 0.291785 0.290394 0.289003 0.287613 0.286222 0.284839 0.283457
0.282074 0.280691 0.279317 0.277943 0.276568 0.275194 0.273828 0.272462
0.271096 0.26973 0.268373 0.267016 0.265658 0.264301 0.262953 0.261604
0.260256 0.258907 0.257568 0.256229 0.25489 0.25355 0.25222 0.25089
0.24956 0.24823 0.24691 0.245589 0.244269 0.242948 0.241637 0.240326
0.239015 0.237705 0.236404 0.235103 0.233802 0.232501 0.23121 0.229919
0.228628 0.227337 0.226056 0.224776 0.223495 0.222214 0.220944 0.219674
0.218404 0.217133 0.215874 0.214614 0.213355 0.212095 0.210847 0.209598
0.208349 0.2071 0.205863 0.204625 0.203387 0.20215 0.200923 0.199697
0.19847 0.197244 0.196029 0.194814 0.193599 0.192383 0.19118 0.189977
0.188773 0.18757 0.186378 0.185186 0.183994 0.182803 0.181623 0.180443
0.179263 0.178084 0.176916 0.175748 0.174581 0.173413 0.172257 0.171102
0.169947 0.168791 0.167648 0.166506 0.165363 0.16422 0.16309 0.161959
0.160829 0.159699 0.158581 0.157464 0.156346 0.155229 0.154124 0.15302
0.151916 0.150811 0.14972 0.148628 0.147537 0.146446 0.145368 0.14429
0.143212 0.142134 0.141069 0.140005 0.13894 0.137876 0.136825 0.135774
0.134723 0.133672 0.132635 0.131598 0.130561 0.129524 0.128501 0.127477
0.126454 0.125431 0.124422 0.123413 0.122404 0.121395 0.1204 0.119405
0.11841 0.117416 0.116435 0.115455 0.114474 0.113494 0.112528 0.111562
0.110596 0.109631 0.108679 0.107728 0.106777 0.105826 0.10489 0.103953
0.103017 0.102081 0.101159 0.100238 0.0993168 0.0983955 0.0974893 0.0965831
0.0956768 0.0947706 0.0938797 0.0929887 0.0920978 0.0912068 0.0903313
0.0894557 0.0885802 0.0877046 0.0868446 0.0859845 0.0851245 0.0842645
0.0834201 0.0825757 0.0817313 0.0808869 0.0800583 0.0792297 0.0784011
0.0775725 0.0767598 0.0759471 0.0751344 0.0743217 0.073525 0.0727283
0.0719317 0.071135 0.0703545 0.0695739 0.0687934 0.0680129 0.0672486
0.0664843 0.0657201 0.0649558 0.0642079 0.06346 0.0627121 0.0619642
0.0612329 0.0605015 0.05977 0.0590387 0.0583239 0.0576091 0.0568943
0.0561795 0.0554814 0.0547833 0.0540853 0.0533872 0.0527059 0.0520246
0.0513434 0.0506621 0.0499977 0.0493334 0.048669 0.0480047 0.0473574
0.04671 0.0460627 0.0454154 0.0447851 0.0441549 0.0435247 0.0428945
0.0422815 0.0416685 0.0410554 0.0404424 0.0398467 0.039251 0.0386553
0.0380596 0.0374813 0.036903 0.0363247 0.0357464 0.0351855 0.0346247
0.0340638 0.033503 0.0329597 0.0324165 0.0318732 0.0313299 0.0308043
0.0302787 0.029753 0.0292274 0.0287195 0.0282116 0.0277037 0.0271958
0.0267057 0.0262156 0.0257255 0.0252354 0.0247631 0.0242909 0.0238187
0.0233465 0.0228922 0.0224379 0.0219836 0.0215293 0.021093 0.0206568
0.0202205 0.0197842 0.0193661 0.0189479 0.0185297 0.0181115 0.0177115
0.0173114 0.0169113 0.0165113 0.0161294 0.0157476 0.0153658 0.0149839
0.0146203 0.0142568 0.0138932 0.0135296 0.0131843 0.0128391 0.0124938
0.0121485 0.0118216 0.0114947 0.0111678 0.0108409 0.0105324 0.010224
0.00991547 0.00960699 0.00931698 0.00902694 0.00873691 0.0084469 0.00817537
0.00790387 0.00763237 0.00736085 0.00710788 0.00685489 0.00660193 0.00634897
0.0061146 0.00588021 0.00564581;
#A 2000 0.00541145 0.00519568 0.00497991 0.00476417 0.0045484 0.00435129
0.00415421 0.00395709 0.00375998 0.00358155 0.00340313 0.0032247 0.00304627
0.00288656 0.00272685 0.00256714 0.00240743 0.00226647 0.00212547 0.00198448
0.00184351 0.00172129 0.00159907 0.00147682 0.0013546 0.00125116 0.00114769
0.00104424 0.0009408 0.000856131 0.000771463 0.000686824 0.000602156
0.000536293 0.000470459 0.000404596 0.000338733 0.000291675 0.000244617
0.000197589 0.000150532 0.000122309 9.40561e-05 6.58333e-05 3.76105e-05
2.8193e-05 1.88053e-05 9.41753e-06;
#X coords 0 1 2047 0 300 100 1;
#X restore 333 88 graph;
#X obj 64 59 r \$0-window_size;
#X obj 417 239 table \$0-re;
#X obj 419 276 table \$0-im;
#X obj 416 320 table \$0-re2;
#X obj 418 357 table \$0-im2;
#X obj 64 87 trigger float float;
#X obj 90 329 osc~;
#X obj 67 387 tabwrite~ \$0-hann;
#X msg 227 296 0.5;
#X obj 67 266 t b f b;
#X obj 90 353 expr~ ($v1 / 2) + 0.5;
#X msg 194 118 resize \$1;
#X obj 214 204 s \$0-re;
#X obj 206 230 s \$0-im;
#X obj 233 152 s \$0-re2;
#X obj 225 178 s \$0-im2;
#X obj 196 257 s \$0-hann;
#X obj 90 296 expr $f2 / $f1;
#X obj 132 259 r \$0-sr;
#X connect 1 0 6 0;
#X connect 6 0 10 0;
#X connect 6 1 12 0;
#X connect 7 0 11 0;
#X connect 9 0 7 1;
#X connect 10 0 8 0;
#X connect 10 1 18 0;
#X connect 10 2 9 0;
#X connect 11 0 8 0;
#X connect 12 0 13 0;
#X connect 12 0 15 0;
#X connect 12 0 14 0;
#X connect 12 0 16 0;
#X connect 12 0 17 0;
#X connect 18 0 7 0;
#X connect 19 0 18 1;
#X restore 1133 117 pd fft-tables;
#X obj 620 337 hsl 128 15 0 1 0 1 empty empty empty -2 -8 0 10 -203904
-1 -1 6600 1;
#N canvas 0 22 396 290 gain 0;
#X obj 109 39 inlet~;
#X obj 198 43 inlet;
#X obj 100 216 dac~;
#X obj 109 141 *~;
#X obj 198 106 line~;
#X msg 198 75 \$1 10;
#X obj 197 136 *~;
#X obj 197 165 *~;
#X connect 0 0 3 0;
#X connect 1 0 5 0;
#X connect 3 0 2 0;
#X connect 3 0 2 1;
#X connect 4 0 6 0;
#X connect 4 0 6 1;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 6 0 7 1;
#X connect 7 0 3 1;
#X restore 571 368 pd gain;
#N canvas 636 257 1000 621 PhaseVocoder(cartesian) 0;
#X obj -126 59 cnv 15 990 500 empty empty Phase_Vocoder 570 70 0 50
-216566 -66577 0;
#X obj -25 218 cnv 15 280 60 empty empty empty 20 12 0 14 -162280 -66577
0;
#X obj -79 121 cnv 15 280 70 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj -109 293 cnv 15 480 66 empty empty empty 20 12 0 14 -204800
-66577 0;
#X obj 163 139 cnv 15 200 75 empty empty empty 20 12 0 14 -204800 -66577
0;
#X obj 79 576 outlet~;
#X text -44 135 T = Back;
#X text 72 137 T' = Front;
#X text 47 295 send back to phase;
#X text 60 313 accumulation;
#X text 53 333 for next round;
#X obj -61 67 cnv 15 200 40 empty empty empty 20 12 0 14 -228856 -66577
0;
#X text 49 76 (THIS INPUT);
#X obj -53 16 inlet;
#X text 145 577 OUTPUT;
#X text 171 141 s = (Previous Output);
#N canvas 107 326 363 271 Back-FFT 0;
#X obj 67 136 rfft~;
#X obj 66 90 *~;
#X obj 81 66 tabreceive~ \$0-hann;
#X obj 66 33 inlet~;
#X obj 34 184 outlet~;
#X obj 94 184 outlet~;
#X connect 0 0 4 0;
#X connect 0 1 5 0;
#X connect 1 0 0 0;
#X connect 2 0 1 1;
#X connect 3 0 1 0;
#X restore -73 154 pd Back-FFT;
#X obj 245 449 r \$0-window_size;
#X msg 245 476 set \$1 4;
#X obj 245 502 block~;
#X obj 79 413 rifft~;
#X obj 79 473 *~;
#X obj 97 446 tabreceive~ \$0-hann;
#X obj 79 504 /~;
#X obj 118 503 expr $f1 * 3/2;
#X obj -101 320 tabsend~ \$0-re2;
#X obj 241 315 tabsend~ \$0-im2;
#X obj 182 162 tabreceive~ \$0-re2;
#X obj 228 187 tabreceive~ \$0-im2;
#N canvas 123 52 275 274 Front-FFT 0;
#X obj 67 136 rfft~;
#X obj 66 90 *~;
#X obj 81 66 tabreceive~ \$0-hann;
#X obj 66 33 inlet~;
#X obj 34 184 outlet~;
#X obj 94 184 outlet~;
#X connect 0 0 4 0;
#X connect 0 1 5 0;
#X connect 1 0 0 0;
#X connect 2 0 1 1;
#X connect 3 0 1 0;
#X restore 59 155 pd Front-FFT;
#N canvas 791 146 495 405 Read-Sample 0;
#X obj 29 287 tabread4~ \$0-sample;
#X obj 318 246 tabread4~ \$0-sample;
#X obj 29 326 outlet~;
#X obj 319 325 outlet~;
#X obj 21 71 inlet;
#X obj 29 222 -~;
#X obj 21 150 sig~;
#X obj 21 113 route new-hop;
#X text 59 222 (Minus new Hop Size);
#X obj 109 166 expr~ fmod($v1 \, end_\$0);
#X obj 29 251 expr~ if ($v1 < 0 \, $v1 + end_\$0 \, $v1);
#X text 91 325 back;
#X text 374 323 front;
#X obj 109 140 line~;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 4 0 7 0;
#X connect 5 0 10 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 1 13 0;
#X connect 9 0 5 0;
#X connect 9 0 1 0;
#X connect 10 0 0 0;
#X connect 13 0 9 0;
#X restore -56 78 pd Read-Sample;
#X text 265 227 - Gets last Phase Vocoder output and sums its phase
to the Phase Difference of two consecutive Windows from the input.
;
#N canvas 415 91 985 492 Phase-Accumulation_(cartesian) 0;
#X obj 66 42 cnv 15 260 80 empty empty empty 20 12 0 14 -261234 -66577
0;
#X obj 327 42 cnv 15 160 80 empty empty empty 20 12 0 14 -204800 -66577
0;
#X obj 354 81 inlet~;
#X obj 412 81 inlet~;
#X obj 84 81 inlet~;
#X obj 135 80 inlet~;
#X obj 209 80 inlet~;
#X obj 260 79 inlet~;
#X obj 171 405 outlet~;
#X obj 420 403 outlet~;
#X text 332 48 s = (Previous Output);
#X text 73 57 T (back Window);
#X text 192 58 T' (Front Window);
#N canvas 945 105 830 384 Normalize 0;
#X obj 370 290 outlet~;
#X obj 52 299 outlet~;
#X obj 341 51 inlet~;
#X obj 73 49 inlet~;
#X obj 55 209 expr~ $v1 / sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \; $v2
/ sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \;;
#X obj 72 131 expr~ if($v1 == 0 && $v2 == 0 \, 1 \, $v1) \; $v2;
#X text 370 134 make real part = 1 \, in case both parts are zero;
#X text 403 210 Divide real and imaginary part by amplitude \; Amplitudes
are normalized to one.;
#X connect 2 0 5 1;
#X connect 3 0 5 0;
#X connect 4 0 1 0;
#X connect 4 1 0 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X restore 232 185 pd Normalize;
#N canvas 205 83 1371 400 Phase_Difference(Complex-Division) 0;
#X obj 69 175 inlet~;
#X obj 142 174 inlet~;
#X obj 216 177 inlet~;
#X obj 290 177 inlet~;
#X obj 69 280 outlet~;
#X obj 290 278 outlet~;
#X text 34 89 Phase Difference by Complex Division;
#X text 74 248 Re = (Re1*Re2) + (Im1*Im2);
#X text 300 247 Im = (Im1*Re2) - (Re1*Im2);
#X text 50 155 Re1 = $v1;
#X text 130 155 Im1 = $v2;
#X text 207 156 Re2 = $v3;
#X text 288 155 Im2 = $v4;
#X obj 697 149 nbx 4 18 -1e+37 1e+37 0 0 empty \$0-Re2 Re2 0 -8 0 12
-257985 -1 -1 0 256;
#X obj 757 149 nbx 4 18 -1e+37 1e+37 0 0 empty \$0-Im2 Im2 0 -8 0 12
-4034 -1 -1 0 256;
#X obj 555 149 nbx 4 18 -1e+37 1e+37 0 0 empty \$0-Re1 Re1 0 -8 0 12
-262130 -1 -1 0 256;
#X obj 615 149 nbx 4 18 -1e+37 1e+37 0 0 empty \$0-Im1 Im1 0 -8 0 12
-204786 -1 -1 0 256;
#X obj 595 215 *~;
#X obj 636 214 *~;
#X obj 683 213 *~;
#X obj 717 213 *~;
#X obj 691 259 -~;
#X obj 609 296 +~;
#X text 525 96 With Math Objects:;
#X text 860 130 note:;
#X text 879 152 when the complex division was presented before \, it
was stated that the result needs to be normalized by a factor. We can
ignore this step here \, because the input we are dividing to is normalized
to 1 \, and it doesn't make a diference in this case.;
#X obj 69 211 expr~ ($v1 * $v3) + ($v2 * $v4) \; ($v2 * $v3) - ($v1
* $v4);
#X text 693 286 Im = (Im1*Re2) - (Re1*Im2);
#X text 610 323 Re = (Re1*Re2) + (Im1*Im2);
#X connect 0 0 26 0;
#X connect 1 0 26 1;
#X connect 2 0 26 2;
#X connect 3 0 26 3;
#X connect 13 0 17 1;
#X connect 13 0 20 1;
#X connect 14 0 18 1;
#X connect 14 0 19 1;
#X connect 15 0 17 0;
#X connect 15 0 19 0;
#X connect 16 0 18 0;
#X connect 16 0 20 0;
#X connect 17 0 22 0;
#X connect 18 0 22 1;
#X connect 19 0 21 0;
#X connect 20 0 21 1;
#X connect 26 0 4 0;
#X connect 26 1 5 0;
#X restore 59 223 pd Phase_Difference(Complex-Division);
#N canvas 234 39 1010 389 Phase_Sum(Complex-Multiplication) 0;
#X obj 98 216 outlet~;
#X obj 320 210 outlet~;
#X obj 99 156 expr~ ($v1 * $v3) - ($v2 * $v4) \; ($v2 * $v3) + ($v1
* $v4);
#X text 27 41 Phase Sum by Complex Multiply;
#X text 108 191 Re = (Re1*Re2) - (Im1*Im2);
#X text 340 186 Im = (Im1*Re2) + (Re1*Im2);
#X obj 99 120 inlet~;
#X obj 171 119 inlet~;
#X obj 246 122 inlet~;
#X obj 320 122 inlet~;
#X text 80 100 Re1 = $v1;
#X text 159 100 Im1 = $v2;
#X text 237 101 Re2 = $v3;
#X text 318 100 Im2 = $v4;
#X text 608 60 with math objects;
#X obj 650 109 nbx 4 18 -1e+37 1e+37 0 0 empty \$0-Re1 Re1 0 -8 0 12
-262130 -1 -1 0 256;
#X obj 792 109 nbx 4 18 -1e+37 1e+37 0 0 empty \$0-Re2 Re2 0 -8 0 12
-257985 -1 -1 0 256;
#X obj 710 109 nbx 4 18 -1e+37 1e+37 0 0 empty \$0-Im1 Im1 0 -8 0 12
-204786 -1 -1 0 256;
#X obj 852 109 nbx 4 18 -1e+37 1e+37 0 0 empty \$0-Im2 Im2 0 -8 0 12
-4034 -1 -1 0 256;
#X obj 688 181 *~;
#X obj 729 180 *~;
#X obj 783 179 *~;
#X obj 816 179 *~;
#X obj 796 210 +~;
#X obj 688 238 -~;
#X text 791 229 Im = (Im1*Re2) + (Re1*Im2);
#X text 685 256 Re = (Re1*Re2) - (Im1*Im2);
#X connect 2 0 0 0;
#X connect 2 1 1 0;
#X connect 6 0 2 0;
#X connect 7 0 2 1;
#X connect 8 0 2 2;
#X connect 9 0 2 3;
#X connect 15 0 19 0;
#X connect 15 0 22 0;
#X connect 16 0 19 1;
#X connect 16 0 21 1;
#X connect 17 0 20 0;
#X connect 17 0 21 0;
#X connect 18 0 20 1;
#X connect 18 0 22 1;
#X connect 19 0 24 0;
#X connect 20 0 24 1;
#X connect 21 0 23 0;
#X connect 22 0 23 1;
#X restore 171 348 pd Phase_Sum(Complex-Multiplication);
#N canvas 945 105 830 384 Normalize 0;
#X obj 370 290 outlet~;
#X obj 52 299 outlet~;
#X obj 341 51 inlet~;
#X obj 73 49 inlet~;
#X obj 55 209 expr~ $v1 / sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \; $v2
/ sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \;;
#X obj 72 131 expr~ if($v1 == 0 && $v2 == 0 \, 1 \, $v1) \; $v2;
#X text 370 134 make real part = 1 \, in case both parts are zero;
#X text 403 210 Divide real and imaginary part by amplitude \; Amplitudes
are normalized to one.;
#X connect 2 0 5 1;
#X connect 3 0 5 0;
#X connect 4 0 1 0;
#X connect 4 1 0 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X restore 339 290 pd Normalize;
#X text 171 435 Real;
#X text 417 431 Imaginary;
#X text 530 79 The diagram here represents the same as last example.
We first get the Front and Previous window and calculate the phase
difference. We do that with complex division \, because when we divide
two complex numbers \, we divide their amplitudes and subtract their
phases.;
#X text 535 173 We want the Amplitudes of the input to remain the same.
That is why we are normalizing the amplitudes from the previous window
\, so it is equal to one \, and it doesn't change the amplitudes when
we divide by it.;
#X text 536 249 Next \, we perform a complex multiplication to add
the phase of our front window to the last phase output. We also normalize
the last output because we want to keep the amplitude information from
the Front window intact.;
#X text 537 326 Open the subpatches to see the math in action.;
#X connect 2 0 16 0;
#X connect 3 0 16 1;
#X connect 4 0 13 0;
#X connect 5 0 13 1;
#X connect 6 0 14 0;
#X connect 7 0 14 1;
#X connect 13 0 14 2;
#X connect 13 1 14 3;
#X connect 14 0 15 0;
#X connect 14 1 15 1;
#X connect 15 0 8 0;
#X connect 15 1 9 0;
#X connect 16 0 15 2;
#X connect 16 1 15 3;
#X restore 0 233 pd Phase-Accumulation_(cartesian);
#X text 397 301 This is equivalent to the last example that was implemented
in the Polar Form \, only that it is implemented in the Cartesian Form.
Open the phase-accumulation patch for more details.;
#X connect 13 0 30 0;
#X connect 16 0 32 0;
#X connect 16 1 32 1;
#X connect 17 0 18 0;
#X connect 17 0 24 0;
#X connect 18 0 19 0;
#X connect 20 0 21 0;
#X connect 21 0 23 0;
#X connect 22 0 21 1;
#X connect 23 0 5 0;
#X connect 24 0 23 1;
#X connect 27 0 32 4;
#X connect 28 0 32 5;
#X connect 29 0 32 2;
#X connect 29 1 32 3;
#X connect 30 0 16 0;
#X connect 30 1 29 0;
#X connect 32 0 25 0;
#X connect 32 0 20 0;
#X connect 32 1 26 0;
#X connect 32 1 20 1;
#X restore 571 301 pd PhaseVocoder(cartesian);
#X obj 877 342 hsl 128 15 0 1 0 1 empty empty empty -2 -8 0 10 -203904
-1 -1 12700 1;
#N canvas 0 22 396 290 gain 0;
#X obj 109 39 inlet~;
#X obj 198 43 inlet;
#X obj 100 216 dac~;
#X obj 109 141 *~;
#X obj 198 106 line~;
#X msg 198 75 \$1 10;
#X obj 197 136 *~;
#X obj 197 165 *~;
#X connect 0 0 3 0;
#X connect 1 0 5 0;
#X connect 3 0 2 0;
#X connect 3 0 2 1;
#X connect 4 0 6 0;
#X connect 4 0 6 1;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 6 0 7 1;
#X connect 7 0 3 1;
#X restore 828 373 pd gain;
#N canvas 180 414 1000 621 PhaseVocoder(miller) 0;
#X obj -126 59 cnv 15 990 500 empty empty Phase_Vocoder 570 70 0 50
-216566 -66577 0;
#X obj -5 218 cnv 15 280 60 empty empty empty 20 12 0 14 -162280 -66577
0;
#X obj 141 121 cnv 15 280 70 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj -89 293 cnv 15 480 66 empty empty empty 20 12 0 14 -204800 -66577
0;
#X obj -87 139 cnv 15 200 75 empty empty empty 20 12 0 14 -204800 -66577
0;
#X obj 99 576 outlet~;
#X text 176 135 T = Back;
#X text 292 137 T' = Front;
#X text 66 298 send back to phase;
#X text 79 316 accumulation;
#X text 72 336 for next round;
#X obj 159 67 cnv 15 200 40 empty empty empty 20 12 0 14 -228856 -66577
0;
#X text 269 76 (THIS INPUT);
#X obj 161 16 inlet;
#X text 165 577 OUTPUT;
#X text -79 141 s = (Previous Output);
#X text 285 227 - Gets last Phase Vocoder output tand sums its phase
to the Phase Difference of two consecutive Windows from the input.
;
#N canvas 107 326 363 271 Back-FFT 0;
#X obj 67 136 rfft~;
#X obj 66 90 *~;
#X obj 81 66 tabreceive~ \$0-hann;
#X obj 66 33 inlet~;
#X obj 34 184 outlet~;
#X obj 94 184 outlet~;
#X connect 0 0 4 0;
#X connect 0 1 5 0;
#X connect 1 0 0 0;
#X connect 2 0 1 1;
#X connect 3 0 1 0;
#X restore 147 154 pd Back-FFT;
#X obj 265 449 r \$0-window_size;
#X msg 265 476 set \$1 4;
#X obj 265 502 block~;
#X obj 99 413 rifft~;
#X obj 99 473 *~;
#X obj 117 446 tabreceive~ \$0-hann;
#X obj 99 504 /~;
#X obj 138 503 expr $f1 * 3/2;
#N canvas 123 52 275 274 Front-FFT 0;
#X obj 67 136 rfft~;
#X obj 66 90 *~;
#X obj 81 66 tabreceive~ \$0-hann;
#X obj 66 33 inlet~;
#X obj 34 184 outlet~;
#X obj 94 184 outlet~;
#X connect 0 0 4 0;
#X connect 0 1 5 0;
#X connect 1 0 0 0;
#X connect 2 0 1 1;
#X connect 3 0 1 0;
#X restore 279 155 pd Front-FFT;
#X obj -73 162 tabreceive~ \$0-re;
#X obj -20 185 tabreceive~ \$0-im;
#X obj -81 320 tabsend~ \$0-re;
#X obj 261 315 tabsend~ \$0-im;
#X obj 410 12 inlet;
#X obj 410 66 s \$0-lock;
#N canvas 791 146 492 409 Read-Sample 0;
#X obj 29 287 tabread4~ \$0-sample;
#X obj 318 246 tabread4~ \$0-sample;
#X obj 29 326 outlet~;
#X obj 319 325 outlet~;
#X obj 21 71 inlet;
#X obj 29 222 -~;
#X obj 21 150 sig~;
#X obj 21 113 route new-hop;
#X text 59 222 (Minus new Hop Size);
#X obj 109 166 expr~ fmod($v1 \, end_\$0);
#X obj 29 251 expr~ if ($v1 < 0 \, $v1 + end_\$0 \, $v1);
#X text 91 325 back;
#X text 374 323 front;
#X obj 109 140 line~;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 4 0 7 0;
#X connect 5 0 10 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 1 13 0;
#X connect 9 0 5 0;
#X connect 9 0 1 0;
#X connect 10 0 0 0;
#X connect 13 0 9 0;
#X restore 161 78 pd Read-Sample;
#N canvas 142 224 1174 632 Phase-Accumulation_(cartesian2) 0;
#X obj 200 206 cnv 15 270 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 330 407 cnv 15 270 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 352 51 cnv 15 260 80 empty empty empty 20 12 0 14 -261234 -66577
0;
#X obj 193 51 cnv 15 160 80 empty empty empty 20 12 0 14 -204800 -66577
0;
#X obj 217 84 inlet~;
#X obj 269 84 inlet~;
#X obj 372 91 inlet~;
#X obj 423 90 inlet~;
#X obj 497 90 inlet~;
#X obj 548 89 inlet~;
#X obj 351 538 outlet~;
#X obj 571 538 outlet~;
#X text 199 58 s = (Previous Output);
#X text 361 67 T (back Window);
#X text 480 68 T' (Front Window);
#X text 380 110 re;
#X text 430 111 im;
#X text 503 109 re;
#X text 553 109 im;
#X obj 350 418 expr~ ($v1 * $v3) - ($v2 * $v4) \; ($v2 * $v3) + ($v1
* $v4);
#X obj 218 218 expr~ ($v1 * $v3) + ($v2 * $v4) \; ($v2 * $v3) - ($v1
* $v4);
#X obj 271 284 cnv 15 150 40 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 228 78 540 392 shift_&_lock 0;
#X obj 158 134 lrshift~ 1;
#X obj 38 136 lrshift~ -1;
#X obj 145 218 *~;
#X obj 127 260 +~;
#X obj 127 290 outlet~;
#X obj 125 47 inlet~;
#X obj 369 130 lrshift~ 1;
#X obj 250 124 lrshift~ -1;
#X obj 356 224 *~;
#X obj 338 266 +~;
#X obj 338 296 outlet~;
#X obj 336 43 inlet~;
#X obj 196 166 r \$0-lock;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 3 1;
#X connect 3 0 4 0;
#X connect 5 0 0 0;
#X connect 5 0 1 0;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 8 0;
#X connect 8 0 9 1;
#X connect 9 0 10 0;
#X connect 11 0 6 0;
#X connect 11 0 7 0;
#X connect 11 0 9 0;
#X connect 12 0 8 1;
#X connect 12 0 2 1;
#X restore 289 295 pd shift_&_lock;
#N canvas 945 105 830 384 Normalize 0;
#X obj 370 290 outlet~;
#X obj 52 299 outlet~;
#X obj 341 51 inlet~;
#X obj 73 49 inlet~;
#X obj 55 209 expr~ $v1 / sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \; $v2
/ sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \;;
#X obj 72 131 expr~ if($v1 == 0 && $v2 == 0 \, 1 \, $v1) \; $v2;
#X text 370 134 make real part = 1 \, in case both parts are zero;
#X text 403 210 Divide real and imaginary part by amplitude \; Amplitudes
are normalized to one.;
#X connect 2 0 5 1;
#X connect 3 0 5 0;
#X connect 4 0 1 0;
#X connect 4 1 0 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X restore 214 157 pd Normalize;
#N canvas 945 105 830 384 Normalize 0;
#X obj 370 290 outlet~;
#X obj 52 299 outlet~;
#X obj 341 51 inlet~;
#X obj 73 49 inlet~;
#X obj 55 209 expr~ $v1 / sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \; $v2
/ sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \;;
#X obj 72 131 expr~ if($v1 == 0 && $v2 == 0 \, 1 \, $v1) \; $v2;
#X text 370 134 make real part = 1 \, in case both parts are zero;
#X text 403 210 Divide real and imaginary part by amplitude \; Amplitudes
are normalized to one.;
#X connect 2 0 5 1;
#X connect 3 0 5 0;
#X connect 4 0 1 0;
#X connect 4 1 0 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X restore 329 360 pd Normalize;
#X text 55 213 phase difference;
#X text 48 237 by complex division;
#X text 190 414 phase sum;
#X text 134 436 by complex multiplication;
#X text 349 566 Real;
#X text 572 571 Imaginary;
#X text 696 282 We do it this way because a new feature was inserted
\, in the subpatch [shift_&_lock].;
#X text 692 160 This implementation is analogous to the one that comes
in Pure Data's audio examples. You can open it and compare it.;
#X text 694 209 We altered the order of operations from the previous
cartesian example \, but this does not affect the result. We first
subtract the phase of back window from the previous output \, then
sum it to the phase of the front window.;
#X text 698 328 If "lock" is on \, it encourages neighboring channels
to stay in phase by adding the two neighboring complex amplitudes.
For more information \, please consult the book by Miller Puckette
and the original example. This feature makes the result sound more
static and is particularly interesting for a very slow tempo.;
#X connect 4 0 23 0;
#X connect 5 0 23 1;
#X connect 6 0 20 2;
#X connect 7 0 20 3;
#X connect 8 0 19 2;
#X connect 9 0 19 3;
#X connect 19 0 10 0;
#X connect 19 1 11 0;
#X connect 20 0 22 0;
#X connect 20 1 22 1;
#X connect 22 0 24 0;
#X connect 22 1 24 1;
#X connect 23 0 20 0;
#X connect 23 1 20 1;
#X connect 24 0 19 0;
#X connect 24 1 19 1;
#X restore 14 233 pd Phase-Accumulation_(cartesian2);
#X text 413 298 This is equally implemented in the cartesian form \,
but the order of operations change a bit \, because of the new "phase-lock"
feature. Check the phase-accumulation subpatch for more details.;
#X connect 13 0 33 0;
#X connect 17 0 34 2;
#X connect 17 1 34 3;
#X connect 18 0 19 0;
#X connect 18 0 25 0;
#X connect 19 0 20 0;
#X connect 21 0 22 0;
#X connect 22 0 24 0;
#X connect 23 0 22 1;
#X connect 24 0 5 0;
#X connect 25 0 24 1;
#X connect 26 0 34 4;
#X connect 26 1 34 5;
#X connect 27 0 34 0;
#X connect 28 0 34 1;
#X connect 31 0 32 0;
#X connect 33 0 17 0;
#X connect 33 1 26 0;
#X connect 34 0 21 0;
#X connect 34 0 29 0;
#X connect 34 1 21 1;
#X connect 34 1 30 0;
#X restore 828 302 pd PhaseVocoder(miller);
#X obj 986 280 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X text 1005 279 phase-lock;
#X text 977 54 Window size;
#X text 85 136 A few additions were made to this new example. Now we
can alter the window size. We can also load samples with a different
sample rate than the patch is running \, because it will perform a
pitch correction accordinf to that.;
#X text 84 214 But now the Phase Vocoder is implemented in the cartesian
form \, with complex math. This has a couple of technical advantages
against the previous example \, as the convertion from cartesian to
polar form and back may introduce a bit of incoherencies. This implementation
is not only more accurate \, but it is also less CPU hungry.;
#X text 86 323 Open the subpatches for more info.;
#X connect 0 0 10 2;
#X connect 1 0 10 0;
#X connect 2 0 10 3;
#X connect 3 0 10 4;
#X connect 4 0 10 1;
#X connect 10 0 22 0;
#X connect 10 0 25 0;
#X connect 12 0 11 0;
#X connect 13 0 11 0;
#X connect 14 0 11 0;
#X connect 15 0 11 0;
#X connect 17 0 10 5;
#X connect 20 0 21 1;
#X connect 22 0 21 0;
#X connect 23 0 24 1;
#X connect 25 0 24 0;
#X connect 26 0 25 1;
